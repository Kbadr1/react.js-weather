{"version":3,"sources":["images/pexels-photo-66997.jpeg","components/SearchForm.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchForm","search","updateSearch","getSearchResult","className","onSubmit","type","placeholder","value","onChange","Weather","weather","temp","name","clouds","weatherDescription","humidity","windSpeed","windDegree","App","useState","cityName","setCityName","setSearch","undefined","setWeather","useEffect","getWeather","axios","get","then","res","console","log","data","all","main","wind","speed","deg","description","src","background","alt","Date","toDateString","e","target","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,iD,6JCW5BC,G,MATI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,gBACxC,OACI,0BAAMC,UAAU,gCAAgCC,SAAUF,GACtD,2BAAOG,KAAK,OAAOC,YAAY,YAAYC,MAAOP,EAAQQ,SAAUP,IACpE,4BAAQI,KAAK,UAAb,aCgBGI,EApBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACI,6BACI,yBAAKP,UAAU,WACVO,EAAQC,MACL,yBAAKR,UAAU,mBACX,mCAAQ,8BAAOO,EAAQE,OACvB,yCAAc,8BAAOF,EAAQC,KAAf,UACd,qCAAU,8BAAOD,EAAQG,OAAf,MACV,wCAAa,8BAAOH,EAAQI,qBAC5B,uCAAY,8BAAOJ,EAAQK,SAAf,MACZ,yCAAc,8BAAOL,EAAQM,UAAf,SACd,6CAAkB,8BAAON,EAAQO,WAAf,a,iBCwD3BC,MA/Df,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACJC,EADI,KACMC,EADN,OAEiBF,mBAAS,IAF1B,mBAEJnB,EAFI,KAEIsB,EAFJ,OAGmBH,mBAAS,CACnCN,YAAQU,EACRR,cAAUQ,EACVZ,UAAMY,EACNX,UAAMW,EACNT,wBAAoBS,EACpBP,eAAWO,EACXN,gBAAYM,IAVL,mBAGJb,EAHI,KAGKc,EAHL,KAcXC,qBAAU,WACW,KAAbL,GACJM,MACD,CAACN,IAEJ,IAAMM,EAAa,WACfC,IAAMC,IAAN,+FAAkGR,EAAlG,yDACKS,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChBT,EAAW,CACPX,OAAQiB,EAAIG,KAAKpB,OAAOqB,IACxBnB,SAAUe,EAAIG,KAAKE,KAAKpB,SACxBC,UAAWc,EAAIG,KAAKG,KAAKC,MACzBpB,WAAYa,EAAIG,KAAKG,KAAKE,IAC1B3B,KAAMmB,EAAIG,KAAKE,KAAKxB,KACpBC,KAAMkB,EAAIG,KAAKrB,KACfE,mBAAoBgB,EAAIG,KAAKvB,QAAQ,GAAG6B,kBAgBxD,OACI,yBAAKpC,UAAU,iBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qBACX,yBAAKqC,IAAKC,IAAYC,IAAI,KAC1B,6BAAK,IAAIC,MAAOC,iBAEpB,yBAAKzC,UAAU,kBACX,kBAAC,EAAD,CAAYH,OAAQA,EAAQC,aAnBvB,SAAA4C,GACjBvB,EAAUuB,EAAEC,OAAOvC,QAkBiDL,gBAfhD,SAAA2C,GACpBA,EAAEE,iBACF1B,EAAYrB,GACZsB,EAAU,OAaE,kBAAC,EAAD,CAASZ,QAASA,QClDlBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.a3cfb4e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pexels-photo-66997.d9cb2667.jpeg\";","import React from 'react'\r\n\r\nconst SearchForm = ({ search, updateSearch, getSearchResult }) => {\r\n    return (\r\n        <form className=\"d-flex justify-content-center\" onSubmit={getSearchResult}>\r\n            <input type=\"text\" placeholder=\"City Name\" value={search} onChange={updateSearch}/>\r\n            <button type=\"submit\">Search</button>\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default SearchForm;","import React from 'react';\r\n\r\nconst Weather = ({ weather }) => {    \r\n    return (\r\n        <div>\r\n            <div className=\"weather\">\r\n                {weather.temp &&\r\n                    <div className=\"weather-details\">\r\n                        <p>City <span>{weather.name}</span></p>\r\n                        <p>Temprature <span>{weather.temp}&deg;C</span></p>\r\n                        <p>Clouds <span>{weather.clouds}%</span></p>\r\n                        <p>Condition <span>{weather.weatherDescription}</span></p>\r\n                        <p>Humidity <span>{weather.humidity}%</span></p>\r\n                        <p>Wind Speed <span>{weather.windSpeed}km/h</span></p>\r\n                        <p>Wind Direction <span>{weather.windDegree}&deg;</span></p>\r\n                    </div>}\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n \r\nexport default Weather;\r\n\r\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport SearchForm from './components/SearchForm';\nimport Weather from './components/Weather';\nimport background from \"./images/pexels-photo-66997.jpeg\"\n\nfunction App() {\n    const [cityName, setCityName] = useState('');\n    const [search, setSearch] = useState('');\n    const [weather, setWeather] = useState({\n        clouds: undefined,\n        humidity: undefined,\n        temp: undefined,\n        name: undefined,\n        weatherDescription: undefined,\n        windSpeed: undefined,\n        windDegree: undefined\n        \n    });\n\n    useEffect(() => {\n        if (cityName === '') return;\n        getWeather();\n    }, [cityName]);\n\n    const getWeather = () => {\n        axios.get(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=a4bdb3ec229b192eb202362ff94e6dce&units=metric`)\n            .then(res => {\n                console.log(res.data);\n                setWeather({\n                    clouds: res.data.clouds.all,\n                    humidity: res.data.main.humidity,\n                    windSpeed: res.data.wind.speed,\n                    windDegree: res.data.wind.deg,\n                    temp: res.data.main.temp,\n                    name: res.data.name,\n                    weatherDescription: res.data.weather[0].description\n                });\n            });\n    };\n\n    const updateSearch = e => {\n        setSearch(e.target.value);\n    }\n\n    const getSearchResult = e => {\n        e.preventDefault();\n        setCityName(search);\n        setSearch('');\n    }\n\n\n    return (\n        <div className=\"App container\">\n            <div className=\"row\">\n                <div className=\"left p-0 col-lg-8\">\n                    <img src={background} alt=\"\"/>\n                    <h2>{new Date().toDateString()}</h2>\n                </div>\n                <div className=\"right col-lg-4\">\n                    <SearchForm search={search} updateSearch={updateSearch} getSearchResult={getSearchResult}/>\n                    <Weather weather={weather}/>\n                </div>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}